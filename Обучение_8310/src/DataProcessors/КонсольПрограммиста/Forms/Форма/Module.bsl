&НаКлиенте
Процедура ВыполнитьК(Команда)
	Если _НаКлиенте Тогда
		 ЗабубенитьК(_Текст.ПолучитьТекст());
	иначе
		Забубенить(_Текст.ПолучитьТекст());
	КонецЕсли;
	Если _ТабличныйДок Тогда
		_Результат.Область().ШиринаКолонки = _ШиринаКолонок;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура Забубенить(Текст)	
	пер = ПолучитьПеременныеВСтруктуре();
	Перед = СформироватТекстПеред(пер);	
	ТекстВыполнения = 
	"Попытка
	|"+Перед+"
	|Дата1 = ТекущаяУниверсальнаяДатаВМиллисекундах();
	|"+Текст+"
	|Дата2 = ТекущаяУниверсальнаяДатаВМиллисекундах();
	|Р = (Дата2 - Дата1)/1000;
	|Элементы.ВремяВыполнения.Заголовок = """"+Р+"" сек."";
	| Исключение
	|	Сообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	| КонецПопытки;";          	
	Выполнить(ТекстВыполнения);
КонецПроцедуры // Забубенить()
               
&НаСервере
Функция СформироватТекстПеред(Пер)
	Перед = "";	
	Для Каждого стр из пер Цикл
		Перед = Перед + ""+стр.Ключ+" = пер["""+стр.Ключ+"""];"+Символы.ПС;
	КонецЦикла;
	Возврат Перед;
КонецФункции // СформироватТекстПеред()

&НаКлиенте
Процедура ЗабубенитьК(Текст)	
	пер = ПолучитьПеременныеВСтруктуре();
	Перед = СформироватТекстПеред(пер);	
	ТекстВыполнения = 
	"Попытка
	|"+Перед+"
	|Дата1 = ТекущаяУниверсальнаяДатаВМиллисекундах();
	|"+Текст+"
	|Дата2 = ТекущаяУниверсальнаяДатаВМиллисекундах();
	|Р = (Дата2 - Дата1)/1000;
	|Элементы.ВремяВыполнения.Заголовок = """"+Р+"" сек."";
	| Исключение
	|	Сообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	| КонецПопытки;";          	
	Выполнить(ТекстВыполнения);	
КонецПроцедуры // Забубенить()

&НаСервере
Функция ПолучитьПеременныеВСтруктуре()
	Струк = новый Структура();		
	Для Каждого стр из _Ссылки Цикл
		Струк.Вставить(стр.Встроке,Стр.стр);		
	КонецЦикла;	
	Возврат Струк;
КонецФункции // СоздатьПеременные()()

&НаСервере
функция ТаблицуВТекст(Таблица,Разделитель = "; ")
	//Сообщить("ВошлиВТБ");	
	шапка = "";
	Для Каждого стр из  Таблица.Колонки Цикл
		шапка = шапка+?(ЗначениеЗаполнено(шапка),Разделитель,"")+стр.Имя;
	КонецЦикла;
	Строки = "";
	Для Каждого стр из Таблица Цикл
		тст = "";
		Для Каждого Колонка из Таблица.Колонки Цикл
			тст = тст+?(ЗначениеЗаполнено(тст),Разделитель,"")+стр[Колонка.имя];		
		КонецЦикла; 
		Строки = Строки+тст+Символы.ПС;		
	КонецЦикла;
	тхт = шапка+Символы.ПС+Строки;
	Возврат тхт;
КонецФункции

&НаКлиенте
Процедура ИспСсылкиПриИзменении(Элемент)
	Элементы._Ссылки.Видимость = _ИспСсылки;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитькодСсылок()	
	п = 1;
	Для Каждого стр из _Ссылки Цикл
		Если не ЗначениеЗаполнено(стр.ВСтроке) Тогда			
			стр.ВСтроке = ПолучитьИмя("Имя"+п);
		КонецЕсли;                		
		п = п+1;
	КонецЦикла; 
КонецПроцедуры //()

&НаСервере
Функция ПолучитьИмя(знач Имя)
	Есть = Истина;
	Пока Есть Цикл
		найти = _Ссылки.НайтиСтроки(новый Структура("ВСтроке",Имя)); 
		Если найти.Количество() = 0 тогда
			Есть = ложь;
		иначе
			СтрЧисло = НайтиЧислоВКонце(Имя);
			Имя = СтрЗаменить(Имя,СтрЧисло,"");
			Имя = Имя+(Число(СтрЧисло)+1);
		КонецЕсли;
	КонецЦикла;
	возврат Имя;
КонецФункции // ПолучитьИмя()

&НаСервере
Функция НайтиЧислоВКонце(Стр)
	Числа = "1234567890";
	Конец = СтрДлина(Стр);
	Ит = Конец;
	ЕстьЧисло = Истина;
	Кол = 0;
	Пока ЕстьЧисло цикл
		сим = Сред(Стр,Ит,1);
		Если Найти(Числа,Сим) = 0 Тогда
			ЕстьЧисло = Ложь;
			Прервать;
		КонецЕсли; 
		Ит = Ит -1;
		Кол = Кол+1;
	КонецЦикла;
	Если Ит = Конец тогда
		чис = "0";
	Иначе
		чис = Прав(Стр,Кол);
	КонецЕсли;
	Возврат чис;
КонецФункции // НайтиЧислоВКонце()

&НаКлиенте
Процедура СсылкиПриИзменении(Элемент)
	 ЗаполнитькодСсылок();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьФункции();	
	Элементы.Подставить.СписокВыбора.Добавить("@@");
	Элементы.Подставить.СписокВыбора.Добавить("Сс(@@);");
	Элементы.Подставить.СписокВыбора.Добавить("ВТД(@@);");
	Элементы.Подставить.СписокВыбора.Добавить("ВТД(@@.Выгрузить());");
	Элементы.Подставить.СписокВыбора.Добавить("ПолучитьЗначениеРеквизита(##,""#@"");");
	_Подставить = Элементы.Подставить.СписокВыбора[0];
	_ШиринаКолонок = 10;
	_РеквизитыФормыТЧ = новый Массив;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВФайл(Команда)
	ДиалогСохранения();
КонецПроцедуры

&НаКлиенте
Процедура ДиалогСохранения(БезПеременных = Ложь)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Фильтр = "Значения настроек (*.ccl)|*.ccl";
	Диалог.ПолноеИмяФайла = _ИмяФайла;
	Диалог.МножественныйВыбор = Ложь;
	Если Диалог.Выбрать() Тогда
		_ИмяФайла = Диалог.ПолноеИмяФайла;				
		Если БезПеременных Тогда
			адрес = СохранитьДанныеБезсПеременных();        				
		Иначе
			адрес = СохранитьДанные();			
		КонецЕсли; 
		Если ЗначениеЗаполнено(адрес) Тогда
			Данные = ПолучитьИзВременногоХранилища(адрес);
			Данные.Записать(Диалог.ПолноеИмяФайла);
			УдалитьИзВременногоХранилища(адрес);
		КонецЕсли;
		ЭтаФорма.Заголовок = Диалог.ПолноеИмяФайла;
		Модифицированность = ложь;
	КонецЕсли; 
КонецПроцедуры // ДиалогСохранения()

&НаСервере
Функция СохранитьДанные()
	Стр = новый Структура("_Текст,_Результат,_Ссылки,_ИмяФайла");		
	ЗаполнитьЗначенияСвойств(стр,ЭтаФорма);	
	стр._Текст = _Текст.ПолучитьТекст();
	стр._Ссылки = _Ссылки.Выгрузить();	
	имя = ПолучитьИмяВременногоФайла();
	Если не ЗначениеВФайл(имя,стр) тогда
		Сообщить("Не удалось сохранить файл");
		Возврат "";
	Иначе
		Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(имя));
		УдалитьФайлы(имя);
	КонецЕсли;
	Возврат Адрес;
КонецФункции // ПолучитьДанныеСохранения()

&НаКлиенте
Процедура СохранитьВФайлБезПерем(Команда)
	ДиалогСохранения(Истина);
КонецПроцедуры

&НаСервере
Функция СохранитьДанныеБезсПеременных()
	Стр = новый Структура("_Текст");
	стр._Текст = _Текст.ПолучитьТекст();
	имя = ПолучитьИмяВременногоФайла();
	Если не ЗначениеВФайл(имя,стр) тогда
		Сообщить("Не удалось сохранить файл");
		Возврат "";
	Иначе
		Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(имя));
		УдалитьФайлы(имя);
	КонецЕсли;
	Возврат Адрес; 
КонецФункции // ПолучитьДанныеСохранения()

&НаСервере
Функция ЗагрузитьДанныеЗполнения(Адрес)
	ДДанные = ПолучитьИзВременногоХранилища(Адрес);
	Имя = ПолучитьИмяВременногоФайла();
	ДДанные.Записать(Имя);
	
	Данные = ЗначениеИзФайла(Имя);
	УдалитьФайлы(Имя);
	Если ЗначениеЗаполнено(Данные) тогда		
		Если Данные.Свойство("_Ссылки") Тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма,Данные,,"_Ссылки"); 		
			_Текст.УстановитьТекст(Данные._Текст);
			_Ссылки.Загрузить(Данные._Ссылки);		
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтаФорма,Данные); 		
			_Текст.УстановитьТекст(Данные._Текст); 
		КонецЕсли;		
	КонецЕсли;
КонецФункции // ЗагрузитьданныеЗполнения()

&НаКлиенте
Процедура Загрузить(Команда)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = "Значения настроек (*.ccl)|*.ccl";
	Диалог.МножественныйВыбор = Ложь;
	Если Диалог.Выбрать() Тогда		
		Адрес = ПоместитьВоВременноеХранилище(новый ДвоичныеДанные(Диалог.ПолноеИмяФайла));
		ЗагрузитьДанныеЗполнения(Адрес);
		УдалитьИзВременногоХранилища(Адрес);
		_ИмяФайла = Диалог.ПолноеИмяФайла;
		ЭтаФорма.Заголовок = _ИмяФайла;
		Модифицированность = Ложь;
	КонецЕсли;  
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если Модифицированность Тогда
		отв = Вопрос("Сохранить перед закрытием?",РежимДиалогаВопрос.ДаНетОтмена);
		Если отв = КодВозвратаДиалога.Да Тогда
			СохранитьВФайл(NUll);
		ИначеЕсли отв = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ИспСсылкиПриИзменении(NULL);
	ПриИзмененииГалочки(_ТабличныйДок,Элементы._ГруппаТД);	
	ПриИзмененииГалочки(_ПоказатьФункции,Элементы._Функции);
	ПриИзмененииГалочки(_ПоказатьДерево,Элементы.ГруппаДерево);
	ПриИзмененииГалочки(_ПоказатьТекст,Элементы.ГруппаТекст);
	Если ЗначениеЗаполнено(_ИмяФайла)  Тогда
		Попытка
			Адрес = ПоместитьВоВременноеХранилище(новый ДвоичныеДанные(_ИмяФайла));
			ЗагрузитьДанныеЗполнения(Адрес);
			УдалитьИзВременногоХранилища(Адрес);
			ЭтаФорма.Заголовок = _ИмяФайла;
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры
 
&НаСервере
Функция ВТД(ТЗ,Добавить = Ложь,Заголовок = Неопределено,СразуВРезультат = Истина)
	ТД = новый ТабличныйДокумент;
	ТД.Вывод = ИспользованиеВывода.Разрешить;
	ЦветШапка = новый Цвет(200,200,200);
	НачальнаяСтрока = 1;
	НачальнаяКолонка = 1;
	с = НачальнаяСтрока; //Строка
	к = НачальнаяКолонка; //Колонка
	Если НЕ Заголовок = Неопределено Тогда
		ЗначениеВОбласть(ТД.Область(с,к),Заголовок);
		с = с + 1;
	КонецЕсли;
		
///// ТаблицаЗначений //////////////////////////////////////////////////////////
	Если ТипЗнч(ТЗ) = Тип("ТаблицаЗначений") тогда		
		Колонки = ТЗ.Колонки;
		Для Каждого стр из Колонки Цикл
			Обл 			= ТД.Область(с,к);
			Обл.Текст 		= стр.Имя;		
			Обл.ЦветФона 	= ЦветШапка;
			к = к+1;
		КонецЦикла;	
		с = с+1;
		Для Каждого стр из ТЗ Цикл
			к = НачальнаяКолонка;
			Для Каждого Кол из Колонки Цикл
				ЗначениеВОбласть(ТД.Область(с,к),стр[Кол.Имя]);
				к = к+1;
			КонецЦикла; 
			с = с+1;
		КонецЦикла;  
///// СписокЗначений //////////////////////////////////////////////////////////
	ИначеЕсли ТипЗнч(ТЗ) = Тип("СписокЗначений") Тогда		
		Для Каждого стр из ТЗ Цикл				
			ЗначениеВОбласть(ТД.Область(с,к)	,стр.Представление);
			ЗначениеВОбласть(ТД.Область(с,к+1),стр.Значение);
		КонецЦикла; 
		с = с+1;
///// Массив //////////////////////////////////////////////////////////
	ИначеЕсли ТипЗнч(ТЗ) = Тип("Массив") Тогда				
		Для Каждого стр из ТЗ Цикл								
			Если ТипЗнч(стр) = Тип("Структура") Тогда
				Для Каждого эл из стр Цикл		
					ЗначениеВОбласть(ТД.Область(с,к),эл.Значение);
					к = к+1;   
				КонецЦикла;
				к = 1;
			Иначе	
				ЗначениеВОбласть(ТД.Область(с,к),стр);
			КонецЕсли; 
			с = с+1;			
		КонецЦикла; 
///// Структура //////////////////////////////////////////////////////////
	ИначеЕсли ТипЗнч(ТЗ) = Тип("Структура") или ТипЗнч(ТЗ) = Тип("Соответствие") Тогда				
		Для Каждого стр из ТЗ Цикл										
			ЗначениеВОбласть(ТД.Область(с,к)	,стр.Ключ);
			ЗначениеВОбласть(ТД.Область(с,к+1),стр.Значение);
			с = с+1;
		КонецЦикла;
///// ДеревоЗначений //////////////////////////////////////////////////////////
	ИначеЕсли ТипЗнч(ТЗ) = Тип("ДеревоЗначений") Тогда
		Результат = ТЗ.Строки;		
		Колонки = ТЗ.Колонки;
		Для Каждого стр из Колонки Цикл
			Обл 			= ТД.Область(с,к);
			Обл.Текст 		= стр.Имя;		
			Обл.ЦветФона 	= ЦветШапка;
			к = к+1;
		КонецЦикла;
		ТД.НачатьАвтогруппировкуСтрок();
		ДеревоЗначенийВТД(ТД,Результат,0,Колонки);
		ТД.ЗакончитьАвтогруппировкуСтрок();
	Иначе
		ЗначениеВОбласть(ТД.Область(с,к),ТЗ);
	КонецЕсли; 
//////////////////////////////////////////////////////////////////////////

Если СразуВРезультат Тогда
	Если Добавить Тогда
		_Результат.Вывести(ТД);	
	Иначе 
		_Результат = ТД;
	КонецЕсли; 
Иначе
	Возврат ТД;
КонецЕсли;     	
КонецФункции //ВТД()

&НаСервере
Процедура ДеревоЗначенийВТД(ТД,Строки,Уровень,Колонки)
	ТС = новый ТабличныйДокумент;
	Строка2 = ТС.ПолучитьОбласть("R1");
	Если Строки.Количество() Тогда
		Для Каждого стр из Строки Цикл			
			Для ит = 0 по Колонки.Количество()-1 Цикл
				ЗначениеВОбласть(Строка2.Область("R1C"+(ит+1)),стр[Колонки[ит].Имя]);
				Строка2.Область("R1C"+(ит+1)).АвтоОтступ = Уровень;
			КонецЦикла;
			ТД.Вывести(Строка2,Уровень,"Группа "+Уровень,Истина);
			ДеревоЗначенийВТД(ТД,стр.Строки,Уровень+1,Колонки)
		КонецЦикла;		
	КонецЕсли; 		
КонецПроцедуры // ДеревоЗначенийВТД()
 
&НаСервере
Процедура ЗначениеВОбласть(Область,Значение)
	Если ТипЗнч(Значение) = Тип("ОбъектМетаданных") Тогда
		Область.Текст = Значение.ПолноеИмя();
	ИначеЕсли ТипЗнч(Значение) = Тип("ТаблицаЗначений")	Тогда
		Область.Текст = Строка(Значение)+"("+Значение.Количество()+")";
	Иначе
		Область.Текст = Значение;
		Область.Расшифровка = Значение;
		
		Если НЕ Метаданные.НайтиПоТипу(ТипЗнч(Значение)) = Неопределено Тогда
			Область.ЦветТекста = Новый Цвет(0,0,255);	
			Область.ЦветФона = Новый Цвет(180,225,215);	
		КонецЕсли;  
	КонецЕсли; 
КонецПроцедуры // ЗначениевОбласть() 

&НаСервере
Функция РазностьДатМесяц2(ДатаНачало,ДатаКонца)
   Если НачалоМесяца(ДатаНачало) > НачалоМесяца(ДатаКонца) Тогда
      Возврат 0;
   Иначе
      Возврат 1 + РазностьДатМесяц2(ДатаНачало,НачалоМесяца(ДатаКонца)-1);
   КонецЕсли;
КонецФункции

&НаСервере
Функция РазностьДатМесяц(знач ДатаНачало, знач ДатаКонца)
	Месяцы = 0;
	Н = НачалоМесяца(НачалоДня(ДатаНачало));	
	К = НачалоМесяца(НачалоДня(ДатаКонца));	
	Если День(ДатаНачало) <= День(ДатаКонца) Тогда
		Месяцы = Месяцы+1;	
	КонецЕсли; 
	Месяцы = Месяцы + Месяц(К) + (12 * (Год(к) - Год(Н))) - Месяц(н);
	Возврат Месяцы;
КонецФункции

&НаСервере
 Функция ДобавитьПериоды(НачальнаяДата,Сумма,Этапы = "12:100")
	Массив = РазложитьСтрокуВМассивПодстрок(Этапы); 		
	ДатаНач = НачальнаяДата;
	Для Каждого стр из Массив Цикл
		Этапов = РазложитьСтрокуВМассивПодстрок(стр,":"); 			
		Мес = Число(СокрЛП(Этапов[0]));
		Процент =  Число(СокрЛП(Этапов[1]));
		СледующаяДата = НачалоДня(ДобавитьМесяц(ДатаНач,Мес))-1;
		ТекСумм = Сумма/100*Процент;
		Сообщить("Мес:"+Мес+" Процент:"+Процент+" ДатаНач"+ДатаНач+" СледующаяДата:"+СледующаяДата+" ТекСумм"+ТекСумм);
		ДатаНач = СледующаяДата+1;
	КонецЦикла; 
КонецФункции

&НаКлиентеНаСервере
Функция ПереводВРаскладку(ИсходныйТекст,Раскладка1 = "",Раскладка2 = "",ВПервуюРаскладку = Ложь)
	Если Раскладка1 = "" Тогда	
		Раскладка1 = "йцукенгшщзхъфывапролджэ\ячсмитьбю.";		
	КонецЕсли; 
	Если Раскладка2 = "" Тогда
		Раскладка2 = "qwertyuiop[]asdfghjkl;'\zxcvbnm,./";		
	КонецЕсли;	
	Если СтрДлина(Раскладка1) <> СтрДлина(Раскладка2) Тогда
		//Сообщить("Раскладки должны быть одинковой длины!");
		Возврат ИсходныйТекст;	
	КонецЕсли; 
	Если ВПервуюРаскладку тогда	
		Первый = НРег(Раскладка1);
		Второй = НРег(Раскладка2);
	иначе		
		Первый = НРег(Раскладка2);
		Второй = НРег(Раскладка1);
	КонецЕсли;       	
	Текст = "";
	для п = 1 по СтрДлина(ИсходныйТекст) цикл
		Сим = Сред(ИсходныйТекст,п,1);
		
		позиция = Найти(Второй,Сим);	
		Если позиция <> 0 тогда	
			Сим = Сред(Первый,позиция,1);		
		КонецЕсли;
		
		позицияАп = Найти(ВРег(Второй),Сим);
		Если позицияАп <> 0 тогда	
			Сим = Сред(ВРег(Первый),позицияАп,1);		
		КонецЕсли;	
		
		Текст = Текст+Сим;
	Конеццикла; 	
	Возврат Текст
КонецФункции // ПереводВРаскладку()

&НаСервере
Процедура Сс(Текст)
	Сообщить(Текст);
КонецПроцедуры // Сс()

&НаКлиенте
Процедура _ТабличныйДокПриИзменении(Элемент)
	ПриИзмененииГалочки(_ТабличныйДок,Элементы._ГруппаТД);	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииГалочки(Галочка,Элемент)
	Элемент.Видимость = Галочка;	
КонецПроцедуры // ПриИзмененииГалочки()

&НаКлиенте
Процедура _ШиринаКолонокПриИзменении(Элемент)
	_Результат.Область().ШиринаКолонки = _ШиринаКолонок;	
КонецПроцедуры

&НаКлиенте
Процедура Закоментировать(Команда)
	ТекстДо = Элементы._Текст.ВыделенныйТекст;
	Текст = "";
	Массив = РазложитьСтрокуВМассивПодстрок(Элементы._Текст.ВыделенныйТекст,Символы.ПС);
	Для ит = 0 по  Массив.Количество() -1 Цикл
		стр = Массив[ит];
		Если ИСТИНА
			 И ит = Массив.Количество()-1 
			 И НЕ ЗначениеЗаполнено(стр)
		Тогда		
			Продолжить;				
		КонецЕсли; 
		Текст = Текст + ?(Текст = "","",Символы.ПС) + СтрЗаменить(стр,СокрЛП(стр),"//"+СокрЛП(стр));	
	КонецЦикла; 
	Элементы._Текст.ВыделенныйТекст = Текст;
КонецПроцедуры

&НаКлиенте
Процедура Раскомментировать(Команда)
	ТекстДо = Элементы._Текст.ВыделенныйТекст;
	Массив = РазложитьСтрокуВМассивПодстрок(Элементы._Текст.ВыделенныйТекст,Символы.ПС);
	Текст = "";	
	//Для Каждого стр из Массив Цикл
	Для ит = 0 по Массив.Количество()-1 Цикл
		стр = Массив[ит];
		Если ИСТИНА
			 И ит = Массив.Количество()-1 
			 И НЕ ЗначениеЗаполнено(стр)
		Тогда		
			Продолжить;				
		КонецЕсли;
		
		Строка = стр;		
		Если Найти(СокрЛ(стр),"//") = 1 Тогда
			поз 	= Найти(стр,"//");
			стр1 	= Лев(стр,поз-1);
			стр2 	= Сред(стр,поз+2);
			Строка 	= стр1 + стр2;
		КонецЕсли; 	
		Текст = Текст + ?(Текст = "","",Символы.ПС) + Строка; 
	КонецЦикла; 
	Элементы._Текст.ВыделенныйТекст = Текст;	
КонецПроцедуры // Раскомментировать()

&НаСервере
Процедура ЗаполнитьФункции()
	
	нстр = _Функции.Добавить(); нстр.Имя = "Если";
	нстр.Код = "Если  Тогда
			   |	
			   |КонецЕсли;"; 			       
	
	нстр = _Функции.Добавить(); нстр.Имя = "Для Каждого";
	нстр.Код = "Для Каждого стр из Результат Цикл
			   |
			   |КонецЦикла;" ; 
	
	нстр = _Функции.Добавить();нстр.Имя = "В Табличный Документ";
	нстр.Код = "ВТД(Значение);"; 	
	
	нстр = _Функции.Добавить();нстр.Имя = "ЗначениеЗаполнено";
	нстр.Код = "ЗначениеЗаполнено(Значение)";
	
	нстр = _Функции.Добавить();нстр.Имя = "ЗаполнитьЗначенияСвойств";
	нстр.Код = "ЗаполнитьЗначенияСвойств(Входящие,Исходящие);";
	
	нстр = _Функции.Добавить();нстр.Имя = "Для";
	нстр.Код = "Для ит = 1 по  цикл
			   |	
			   |КонецЦикла;";
	нстр = _Функции.Добавить();нстр.Имя = "Запрос";		   
	нстр.Код = "Запрос = Новый Запрос(""ВЫБРАТЬ
	||	Документ.Ссылка
	||ИЗ
	||	Документ.Документ КАК Документ
	||ГДЕ
	||	Документ.Ссылка = &Ссылка"");
	|
	|Запрос.УстановитьПараметр("""", );
	|
	|Результат = Запрос.Выполнить();
	|Выборка = Результат.Выбрать();
	|
	|Пока Выборка.Следующий() Цикл
	|
	|КонецЦикла;";
	нстр = _Функции.Добавить();нстр.Имя = "Разложить в дерево";
	нстр.Код = "ДобавитьОбъектВДерево(ИмяКорня, Значение, НеРаскладывать);";
	
	нстр = _Функции.Добавить();нстр.Имя = "Пометисить в Текст";
	нстр.Код = "ВТекст(Текст);";
	
	нстр = _Функции.Добавить();нстр.Имя = "РазложитьСтрокуВМассивПодстрок";
	нстр.Код = "РазложитьСтрокуВМассивПодстрок(Строка,Разделитель,ПропускатьПустыеСтроки);";
	
	нстр = _Функции.Добавить();нстр.Имя = "ПереводВРаскладку";	
	нстр.Код = "ПереводВРаскладку(ИсходныйТекст,Раскладка1,Раскладка2,ВПервуюРаскладку);";
	
	нстр = _Функции.Добавить();нстр.Имя = "ЭтоПростойТип";	
	нстр.Код = "ЭтоПростойТип(Значение);";
		
	нстр = _Функции.Добавить();нстр.Имя = "НайтиСсылки";	
	нстр.Код = "НайтиСсылки(Значение);";
	
	нстр = _Функции.Добавить();нстр.Имя = "МетаданныеВДерево";	
	нстр.Код = "МетаданныеВДерево(Истина);";
	
КонецПроцедуры // ЗаполнитьФункции()

&НаКлиенте
Процедура _ФункцииНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)	
	ПараметрыПеретаскивания.Значение = Элементы._Функции.ТекущиеДанные.Код;
КонецПроцедуры

&НаКлиенте
Процедура _ФункцииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НЕ НоваяСтрока Тогда
		Элементы._Текст.ВыделенныйТекст = Элемент.ТекущиеДанные.Код;	
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура _ПоказатьФункцииПриИзменении(Элемент)
	ПриИзмененииГалочки(_ПоказатьФункции,Элементы._Функции);
КонецПроцедуры

&НаСервере
Функция ЗапистьОбъектВXML(Об,Файл = "")
	Мата = Об.Метаданные();
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(Файл);
	
	// Записать директиву
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	// Записать начало корневого элемента 
	ЗаписьXML.ЗаписатьНачалоЭлемента(Мата.ПолноеИмя());
	ЗаписьXML.ЗаписатьНачалоЭлемента("СтандартныеРеквизиты");
	Для Каждого стр из Мата.СтандартныеРеквизиты Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента(стр.Имя);			
		ЗаписьXML.ЗаписатьАтрибут("Тип",Строка(ТипЗнч(Об[стр.Имя])));	
		ЗаписьXML.ЗаписатьТекст(Строка(Об[стр.Имя]));			
		ЗаписьXML.ЗаписатьКонецЭлемента();	
	КонецЦикла; 
	ЗаписьXML.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Реквизиты");
	Для Каждого стр из Мата.Реквизиты Цикл
		Если стр.Имя = "Ссылка" Тогда
			Продолжить;
		КонецЕсли; 
		РазложитьОбъектВХМЛ(ЗаписьXML,стр.Имя,Об[стр.Имя]);	
	КонецЦикла; 
	ЗаписьXML.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
КонецФункции // ЗапистьОбъектВXML()

&НаСервере                                                          
Процедура РазложитьОбъектВХМЛ(ЗаписьXML,Реквизит,Об)
	
	Если ЭтоПростойТип(Об) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента(Реквизит);			
		ЗаписьXML.ЗаписатьАтрибут("Тип",Строка(ТипЗнч(Об)));	
		ЗаписьXML.ЗаписатьТекст(Строка(Об));	
		ЗаписьXML.ЗаписатьКонецЭлемента();
	Иначе
		Мата = Об.Метаданные();
		ВИД = РазложитьСтрокуВМассивПодстрок(Мата.ПолноеИмя(),".")[0];	
		Если ВИД = "Справочник" Тогда
			Если Реквизит = "Ссылка" 
				или  Реквизит = "Родитель" 			
				или  Реквизит = "Владелец"
				или  Об.Пустая() Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента(Реквизит);			
				ЗаписьXML.ЗаписатьАтрибут("Тип",Строка(Мата.ПолноеИмя()));	
				ЗаписьXML.ЗаписатьТекст(Строка(Об));	
				ЗаписьXML.ЗаписатьКонецЭлемента();				
				Возврат;
			КонецЕсли; 
			ЗаписьXML.ЗаписатьНачалоЭлемента(Реквизит);
				ЗаписьXML.ЗаписатьНачалоЭлемента("СтандартныеРеквизиты");
				Для Каждого стр из Мата.СтандартныеРеквизиты Цикл
					РазложитьОбъектВХМЛ(ЗаписьXML,стр.Имя,Об[стр.Имя]);										
				КонецЦикла; 
				ЗаписьXML.ЗаписатьКонецЭлемента();	
				ЗаписьXML.ЗаписатьНачалоЭлемента("Реквизиты");
				Для Каждого стр из Мата.Реквизиты Цикл					
					Если Об = Об[стр.Имя] Тогда
						ЗаписьXML.ЗаписатьНачалоЭлемента(стр.Имя);			
						Если ЭтоПростойТип(Об[стр.Имя]) Тогда
							Тип = ТипЗнч(Об[стр.Имя]);
						Иначе
							МатаД = Об.Метаданные();							
							Тип = МатаД.ПолноеИмя();
						КонецЕсли; 
						ЗаписьXML.ЗаписатьАтрибут("Тип",Строка(Тип));	
						ЗаписьXML.ЗаписатьТекст(Строка(Об[стр.Имя]));	
						ЗаписьXML.ЗаписатьКонецЭлемента();
					Иначе
						РазложитьОбъектВХМЛ(ЗаписьXML,стр.Имя,Об[стр.Имя]);					
					КонецЕсли;
				КонецЦикла; 
				ЗаписьXML.ЗаписатьКонецЭлемента();	
			ЗаписьXML.ЗаписатьКонецЭлемента();			
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры // РазложитьОбъектВХМЛ()
                                                                                                              
&НаСервереБезКонтекста
Функция ЭтоПростойТип(Значение)
	Тип = ТипЗнч(Значение);
	Если ЛОЖЬ
		 ИЛИ Тип = Тип("Число")
		 ИЛИ Тип = Тип("Строка") 
		 ИЛИ Тип = Тип("Дата") 
		 ИЛИ Тип = Тип("Булево") 
		 ИЛИ Тип = Тип("Дата") 
		 ИЛИ Тип = Тип("Null") 
		 ИЛИ Тип = Тип("ХранилищеЗначения") 
		 ИЛИ Тип = Тип("УникальныйИдентификатор")
		 ИЛИ Тип = Тип("ВидСчета")
		 ИЛИ Тип = Тип("ВидДвиженияНакопления")
		 ИЛИ Значение = Неопределено
	Тогда
		Возврат ИСТИНА;
	КонецЕсли; 
	Возврат Ложь;
КонецФункции // ЭтоПростойТип()
                                                                                  
&НаКлиенте
Процедура РазложитьВДерево(Команда)
	ТД = Элементы._Ссылки.ТекущиеДанные;
	ДобавитьОбъектВДерево(ТД.ВСтроке,ТД.стр);
КонецПроцедуры
&НаСервере
Процедура ДобавитьОбъектВДерево(Имя, Значение, НЕРаскладывать = Ложь)		
	РазложитьВДеревоОбъект(_Дерево,Имя,Значение,НЕРаскладывать);	
КонецПроцедуры // Разложить()
 
&НаСервере                                                                               
Процедура РазложитьВДеревоОбъект(Дерево,Реквизит,Значение,Знач НеРАскладывать = Ложь)			  	
	Корень = Дерево.ПолучитьЭлементы();
	Если ТипЗнч(Значение) = Тип("Структура") Тогда
		СтрокаДерева = Корень.Добавить();
		СтрокаДерева.Реквизит = Реквизит;
		СтрокаДерева.Значение = "Структура";				
		СтрокаДерева.Тип = "Структура";		
		Для Каждого стр из Значение Цикл
			РазложитьВДеревоОбъект(СтрокаДерева,стр.Ключ,стр.Значение,НеРАскладывать);	
		КонецЦикла; 	
	Иначе 
		Если ЭтоПростойТип(Значение)
			ИЛИ Реквизит = "Ссылка"
			ИЛИ Реквизит = "Владелец"
			ИЛИ НЕ ЗначениеЗаполнено(Значение)
			ИЛИ НеРАскладывать Тогда
			СтрокаДерева = Корень.Добавить();
			СтрокаДерева.Реквизит = Реквизит;
			СтрокаДерева.Значение = Значение;		
			Если Реквизит = "ЗначениеПеречисления" Тогда
				СтрокаДерева.Тип = "ЗначениеПеречисления";
			Иначе				
				М = Метаданные.НайтиПоТипу(ТипЗнч(Значение));
				Если М = Неопределено Тогда
					СтрокаДерева.Тип = ТипЗнч(Значение);
				Иначе
					СтрокаДерева.Тип = М.ПолноеИмя();
				КонецЕсли; 
			КонецЕсли; 
			
		Иначе
			Мета = Значение.Метаданные();
			ПолноеИмя = Мета.ПолноеИмя();
			ВИД = РазложитьСтрокуВМассивПодстрок(ПолноеИмя,".")[0];	
			ВидМетаданных = новый Структура(); 
			ИспользуемыеДанные = новый Массив;
			
			ИспользуемыеДанные.Добавить("СтандартныеРеквизиты");
			ИспользуемыеДанные.Добавить("Реквизиты");
			ИспользуемыеДанные.Добавить("ТабличныеЧасти");
			
			ВидМетаданных.Вставить("Справочник",ИспользуемыеДанные); 
			ВидМетаданных.Вставить("Документ",ИспользуемыеДанные);
			ВидМетаданных.Вставить("ПланСчетов",ИспользуемыеДанные);
			
			ИспользуемыеДанные = новый Массив;
			ИспользуемыеДанные.Добавить("ЗначенияПеречисления");
			ВидМетаданных.Вставить("Перечисление",ИспользуемыеДанные);
			
			Корень = Корень.Добавить();
			Корень.Реквизит = Реквизит;
			Корень.Значение = Значение;
			Корень.Тип = ПолноеИмя;
			Для Каждого МетаданныеТаблица из ВидМетаданных[ВИД] Цикл
				Для Каждого стр из Мета[МетаданныеТаблица] Цикл
					Если МетаданныеТаблица = "ТабличныеЧасти" Тогда
						ЭлементыДерева = Корень.ПолучитьЭлементы();
						СтрокаДерева = ЭлементыДерева.Добавить();
						СтрокаДерева.Реквизит = стр.Имя;
						СтрокаДерева.Значение = Значение[стр.Имя].Количество();
						СтрокаДерева.Тип = "ТабличнаяЧасть";
						КолонкиТаблицы = СтрокаДерева.ПолучитьЭлементы();
						Для Каждого Рекв из стр.Реквизиты Цикл							
							Колонка = КолонкиТаблицы.Добавить();
							Колонка.Реквизит = Рекв.Имя;
							Колонка.Значение = ?(СтрокаДерева.Значение,Значение[стр.Имя][0][Рекв.Имя],"");
							Колонка.Тип = ПолучитьОписаниеТипа(Рекв.Тип);
						КонецЦикла; 
						Продолжить;
					КонецЕсли;                                  					
					//КонецЕсли; 
					Если ВИД = "Перечисление" Тогда
						РазложитьВДеревоОбъект(Корень,"ЗначениеПеречисления",стр.Имя);				
					Иначе
						НеРаскладывать2 = истина;
						Родитель = Корень.ПолучитьРодителя();
						Пока НеРаскладывать2 и НЕ Родитель = Неопределено цикл						
							Если Родитель.Значение =  Значение[стр.Имя] Тогда
								НеРаскладывать2 = Ложь;
							Иначе 
								Родитель = Родитель.ПолучитьРодителя();                        
							КонецЕсли;
						КонецЦикла;
						РазложитьВДеревоОбъект(Корень,стр.Имя,Значение[стр.Имя],не НеРаскладывать2);				
					КонецЕсли; 
				КонецЦикла; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 	
КонецПроцедуры // РазложитьВДеревоОбъект()

&НаСервереБезКонтекста
Функция ПолучитьОписаниеТипа(Тип)
	Строка = "";
	Для Каждого стр из Тип.Типы() Цикл
		Массив = новый Массив; 
		Массив.Добавить(Стр);
		Описание = Новый ОписаниеТипов(Массив);
		Значение = Описание.ПривестиЗначение();
		ТипСтр = "";
		Если ЭтоПростойТип(Значение) Тогда
			ТипСтр = ТипЗнч(Значение);        
		Иначе
			ТипСтр = Метаданные.НайтиПоТипу(Стр).ПолноеИмя();				
		КонецЕсли; 
		Строка = Строка+?(Строка = "","","; ")+ТипСтр; 
	КонецЦикла; 
	Возврат Строка;
КонецФункции // ПолучитьОписаниеТипа()
 
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые строки;
//  РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",")
	Массив = ЗначениеИзСтрокиВнутр("{""#"",51e7a0d2-530b-11d4-b98a-008048da3034,{0,{""S"",""" + СтрЗаменить(СтрЗаменить(Строка, """", """"""), Разделитель, """},{""S"",""") + """}}}");
	Возврат Массив;	
КонецФункции 

&НаКлиенте
Процедура _СсылкиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	_Перетаскивание = новый Структура("Реквизит,Значение,Куда,От",Элемент.ТекущиеДанные.ВСтроке,Элемент.ТекущиеДанные.стр,новый Структура("Имя",Неопределено),Элемент.имя); 
	ПараметрыПеретаскивания.Значение = Элемент.ТекущиеДанные.ВСтроке;
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Родитель = Элемент.ТекущиеДанные;	
	_Перетаскивание = новый Структура("Реквизит,Значение,Куда,От",Родитель.Реквизит,Родитель.значение,новый Структура("Имя",Неопределено),Элемент.имя); 
	СтрокаВозврата = "";
	Если Родитель.Реквизит = "ЗначениеПеречисления" Тогда
		СтрокаВозврата = "ПредопределенноеЗначение("""+Родитель.ПолучитьРодителя().Тип+"."+Родитель.Значение+""")";		
	Иначе
		пока не Родитель = Неопределено цикл
			СтрокаВозврата = Родитель.Реквизит+?(ЗначениеЗаполнено(СтрокаВозврата),".","")+СтрокаВозврата;
			Родитель = Родитель.ПолучитьРодителя();
		КонецЦикла;		
	КонецЕсли;
	Если ЗначениеЗаполнено(_Подставить)  Тогда
		ИсходнаяСтрока = СтрокаВозврата;
		УжеМенялось = Ложь;
		Если Найти(_Подставить,"##") Тогда
			Р = Элемент.ТекущиеДанные;
			Родитель = Элемент.ТекущиеДанные.Реквизит;
			Пока Истина Цикл
				Если Р.ПолучитьРодителя() = Неопределено Тогда
					Родитель = Р.Реквизит;	
					Прервать;
				КонецЕсли;
				Р = Р.ПолучитьРодителя();
			КонецЦикла;				
			СтрокаВозврата = СтрЗаменить(_Подставить,"##",Родитель);		
			УжеМенялось = истина;
		КонецЕсли; 
		Если Найти(_Подставить,"#@") Тогда
			Р = Элемент.ТекущиеДанные;
			Родитель = Элемент.ТекущиеДанные.Реквизит;
			Пока Истина Цикл                                      
				Если Р.ПолучитьРодителя() = Неопределено Тогда
					Родитель = Р.Реквизит;	
					Прервать;
				КонецЕсли;
				Р = Р.ПолучитьРодителя();
			КонецЦикла;                                                                                      
			СтрокаВозврата = СтрЗаменить(?(УжеМенялось,СтрокаВозврата,_Подставить),"#@",СтрЗаменить(ИсходнаяСтрока,Родитель+".",""));
			УжеМенялось = истина;
		КонецЕсли;
		Если Найти(_Подставить,"@@") Тогда
			 СтрокаВозврата = СтрЗаменить(?(УжеМенялось,СтрокаВозврата,_Подставить),"@@",ИсходнаяСтрока);		
		КонецЕсли; 		
	КонецЕсли;	
	ПараметрыПеретаскивания.Значение = СтрокаВозврата;	
КонецПроцедуры

&НаКлиенте
Процедура _СсылкиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если _Перетаскивание = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	Если Не Элемент = _Перетаскивание.От Тогда
		_Перетаскивание.Куда = Элемент.имя;
		//сс("Проверка:"+Элемент.Имя);
	КонецЕсли;                                          	
	
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если _Перетаскивание = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	Если Не Элемент = _Перетаскивание.От Тогда
		_Перетаскивание.Куда = Элемент.имя;
		//сс("Проверка:"+Элемент.Имя);
	КонецЕсли; 
		 //Сообщить("Дерево");
 КонецПроцедуры
 
&НаКлиенте
Процедура _СсылкиОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)	
	Если ЗначениеЗаполнено(_Перетаскивание) и _Перетаскивание.Куда = "_Дерево" тогда			
		ДобавитьОбъектВДерево(_Перетаскивание.Реквизит, _Перетаскивание.Значение);	
	КонецЕсли;     
	_Перетаскивание = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)	
	Если ЗначениеЗаполнено(_Перетаскивание) и _Перетаскивание.Куда = "_Ссылки" тогда			
		Нстр = _Ссылки.Добавить();
		Нстр.ВСтроке = _Перетаскивание.Реквизит;
		Нстр.Стр = _Перетаскивание.Значение;
	КонецЕсли;
	_Перетаскивание = Неопределено;
КонецПроцедуры
 
&НаКлиенте
Процедура _ПоказатьДеревоПриИзменении(Элемент)
	ПриИзмененииГалочки(_ПоказатьДерево,Элементы.ГруппаДерево);
КонецПроцедуры

&НаСервере
Процедура ВТекст(Текст)
	_Текст2.УстановитьТекст(Текст);	
КонецПроцедуры // ВТекст()

&НаКлиенте
Процедура _ПоказатьТекстПриИзменении(Элемент)
	ПриИзмененииГалочки(_ПоказатьТекст,Элементы.ГруппаТекст);
КонецПроцедуры
 
&НаКлиенте
Функция ПропарситьХМЛ(Чтение,ЛокальноеИмя)
	стр = ПариснгХМЛ(Чтение,ЛокальноеИмя);	
	Возврат стр;
КонецФункции // Пропарсить()()
 
&НаКлиенте
Функция ПариснгХМЛ(Чтение,Знач ЛокальноеИмя)
	Структура = новый Структура(ЛокальноеИмя); 
	Пока Чтение.Прочитать() Цикл
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента и
			Чтение.ЛокальноеИмя <> ЛокальноеИмя Тогда
			Структура.Вставить(ЛокальноеИмя,ПариснгХМЛ(Чтение,Чтение.ЛокальноеИмя));
		КонецЕсли;
		Если Чтение.ТипУзла = ТипУзлаXML.Текст Тогда
			Структура[ЛокальноеИмя] = Чтение.Значение;
		КонецЕсли;
		Если Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если Чтение.ЛокальноеИмя = ЛокальноеИмя Тогда
				Возврат Структура;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	Возврат Неопределено;
КонецФункции // Париснг()

&НаКлиенте
Процедура ЗаполнитьФункцииКнопка(Команда)
	_Функции.Очистить();
	ЗаполнитьФункции();
КонецПроцедуры

&НаСервере
Процедура ПолучитьДеревоДанных(Дерево, Файл)
	
	//ДеревоДанных = Новый ДеревоЗначений;
	//ДеревоДанных.Колонки.Добавить("Реквизит");
	//ДеревоДанных.Колонки.Добавить("Значение");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Файл);
	
	ТекЭлемент = Неопределено;
	ТекБаза = Неопределено;
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			РежимЗагрузки = ЧтениеXML.Имя;
			
			Если ТекЭлемент = Неопределено Тогда
				ТекЭлемент = Дерево.ПолучитьЭлементы().Добавить();
				ТекЭлемент.Реквизит = РежимЗагрузки;
				ТекЭлемент.Значение = Файл;
			Иначе
				ТекЭлемент = ТекЭлемент.ПолучитьЭлементы().Добавить();
				ТекЭлемент.Реквизит = РежимЗагрузки;					
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если ТекЭлемент = Неопределено Тогда
				ТекЭлемент = Неопределено;
			Иначе
				ТекЭлемент = ТекЭлемент.ПолучитьРодителя();
			КонецЕсли;
			Продолжить;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			ТекЭлемент.Значение = ЧтениеXML.Значение;
		КонецЕсли;
		
		Для сч = 0 По ЧтениеXML.КоличествоАтрибутов() - 1 Цикл
			Стр = ТекЭлемент.ПолучитьЭлементы().Добавить();
			Стр.Реквизит = ЧтениеXML.ИмяАтрибута(сч);
			Стр.Значение = ЧтениеXML.ЗначениеАтрибута(сч);
		КонецЦикла;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	//Возврат ДеревоДанных;
КонецПроцедуры

&НаСервере
Процедура ХМЛвДерево(Файл)
	ПолучитьДеревоДанных(_Дерево,Файл);
КонецПроцедуры // ХМЛвДерево()

&НаСервере
Функция ПолучитьЗначениеРеквизитовВСтруктуре(Знач Объект,Знач Реквизит,ПолныеИмена = Истина) 
	Реквизиты = РазложитьСтрокуВМассивПодстрок(СтрЗаменить(СокрЛП(Реквизит)," ",""),",");
	Структура = новый Структура;
	Для Каждого стр из Реквизиты Цикл
		Если ПолныеИмена Тогда
			Имя = СтрЗаменить(стр,".","");
		иначе
			Нимя = РазложитьСтрокуВМассивПодстрок(стр,".");
			Имя = СокрЛП(Нимя[Нимя.Количество()-1]);
		КонецЕсли;            		
		Структура.Вставить(Имя,ПолучитьЗначениеРеквизита(Объект,стр));			
	КонецЦикла; 
	Возврат Структура;   	
КонецФункции // ПолучитьЗначениеРеквизитов() 

&НаСервере
Функция ПолучитьЗначениеРеквизита(Знач Объект,Знач Реквизит) 
	Массив = РазложитьСтрокуВМассивПодстрок(Реквизит,".");
	ТОбъект = Объект;
	Значение = Неопределено;
	Попытка
		Для Каждого стр из Массив Цикл
			Значение = ТОбъект[стр];
			ТОбъект = Значение;
		КонецЦикла;
		Возврат Значение;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

&НаСервере
Функция ТаблицуЗначенийВМассивСтруктур(Знач ТЗ,Свернуть = "",Сумма = "",Соритировать = "") 
	Если не ПустаяСтрока(Свернуть) тогда
		ТЗ.Свернуть(Свернуть,Сумма);
	КонецЕсли;
	Если не ПустаяСтрока(Соритировать) тогда
		ТЗ.Сортировать(Соритировать);
	КонецЕсли; 	
	Массив = новый Массив;
	Колонки = ТЗ.Колонки;
	для Каждого стр из ТЗ цикл
		структ = новый Структура();
		для Каждого к из Колонки цикл
			структ.Вставить(к.Имя,стр[к.Имя]);
		Конеццикла;
		Массив.Добавить(структ);
	КонецЦикла;	
	Возврат Массив;
КонецФункции

&НаСервере
Функция НайтиСсылки(Знач Значение,ВТД = Истина)
	Если НЕ ТипЗнч(Значение) = Тип("Массив") Тогда
		Массив = новый 	Массив;
		Массив.Добавить(Значение);
	Иначе
		Массив = Значение;
	КонецЕсли; 
	ДопИнфа = Новый Цвет(180,225,215);
	ЦветСсылки = Новый Цвет(0,0,255);
	ТабСсылок = НайтиПоСсылкам(Массив);
	Если ВТД Тогда
		МассивТаблицРегистр = новый Массив; 
		МассивТаблицРегистр.Добавить("СтандартныеРеквизиты");
		МассивТаблицРегистр.Добавить("Измерения");
		//МассивТаблицРегистр.Добавить("Ресурсы");
		//МассивТаблицРегистр.Добавить("Реквизиты");
		
		ТД = новый ТабличныйДокумент;
		ТД.Вывод = ИспользованиеВывода.Разрешить;
		
		
		Колонки = ТабСсылок.Колонки;
		с = 1;
		к = 1;
		Для Каждого стр из Колонки Цикл
			Обл = ТД.Область(с,к);
			Обл.Текст = стр.Имя;		
			к = к+1;
		КонецЦикла;	
		с = с+1;
		Для Каждого стр из ТабСсылок Цикл
			к = 1;
			сд = 0;
			Для Каждого Кол из Колонки Цикл
				Обл = ТД.Область(с,к);
				Если Найти(Строка(ТипЗнч(стр[Кол.Имя])),"Регистр сведений ключ записи") Тогда
					Реквизиты = новый Массив; 
					Для Каждого т из МассивТаблицРегистр Цикл
						Для Каждого нстр из стр.Метаданные[т] Цикл
							Реквизиты.Добавить(нстр.Имя);	
						КонецЦикла; 	
					КонецЦикла;
					Обл.Текст = стр[Кол.Имя];
					сд = сд+1;
					Запрос = новый Запрос();
					Запрос.Текст = "ВЫБРАТЬ
					|  *
					|ИЗ
					|	"+стр.Метаданные.ПолноеИмя()+" КАК _ус_ДСП";
					Условие = "";
					Для Каждого ДопСтр из Реквизиты Цикл
						Запрос.УстановитьПараметр(ДопСтр,стр[Кол.Имя][ДопСтр]);			   
						Условие = Условие+?(Условие = "",""," И ")+"_ус_ДСП."+ДопСтр+" = &"+ДопСтр+""+Символы.ПС;  						
					КонецЦикла;
					Запрос.Текст = Запрос.Текст+Символы.ПС+"ГДЕ"+Символы.ПС+Условие;
					зп =  Запрос.Выполнить();
					Результат = зп.Выбрать();
					Если Результат.Следующий() Тогда
						Для Каждого кк из зп.Колонки Цикл
							ЗначениеВОбласть(ТД.Область(с+сд,к-1,с+сд,к-1),кк.Имя);
							М = Метаданные.НайтиПоТипу(ТипЗнч(Результат[кк.Имя]));
							Если М = Неопределено Тогда
								ЗначениеВОбласть(ТД.Область(с+сд,к+1,с+сд,к+1),ТипЗнч(Результат[кк.Имя]));
							Иначе								
								ЗначениеВОбласть(ТД.Область(с+сд,к+1,с+сд,к+1),М.ПолноеИмя());
							КонецЕсли;														
							ЗначениеВОбласть(ТД.Область(с+сд,к,с+сд,к),Результат[кк.Имя]);														
							сд = сд+1;                          							
						КонецЦикла;
					КонецЕсли;
				Иначе					
					ЗначениеВОбласть(Обл,стр[Кол.Имя]);							
				КонецЕсли; 
				к = к+1;
			КонецЦикла; 
			с = с+1+сд;
		КонецЦикла; 
		_Результат = ТД;
	Иначе
		Возврат ТабСсылок;
	КонецЕсли; 
КонецФункции // НайтиСсылки()

&НаКлиенте
Процедура ДобавитьВПеременные(Команда)
	Если Элементы._Результат.ПолучитьВыделенныеОбласти().Количество() Тогда
		Лево = Элементы._Результат.ТекущаяОбласть.Лево;
		Право = Элементы._Результат.ТекущаяОбласть.Право;
		Верх = Элементы._Результат.ТекущаяОбласть.Верх;
		Низ = Элементы._Результат.ТекущаяОбласть.Низ;
		Для Колонка = Лево по Право цикл
			Для Строка = Верх по Низ цикл
				Обл = _Результат.Область(Строка,Колонка);	
				Если НЕ Обл.Расшифровка = Неопределено Тогда
					Нстр = _Ссылки.Добавить();	
					Нстр.стр = Обл.Расшифровка;
				КонецЕсли;
			КонецЦикла; 	
		КонецЦикла; 
		ЗаполнитькодСсылок();	
	КонецЕсли; 	
КонецПроцедуры

&НаСервере
Процедура МетаданныеВДерево(ОчищатьДерево = истина)
	
	Корень = _Дерево.ПолучитьЭлементы();
	Если ОчищатьДерево Тогда		
		Корень.Очистить();
	КонецЕсли; 
	
	Массив = Новый Массив;
	Массив.Добавить("СтандартныеРеквизиты");
	Массив.Добавить("Реквизиты");
	Массив.Добавить("ТабличныеЧасти"); 
	//Массив.Добавить("Формы"); 
	
	СтруктураДанных = Новый Структура();
	
	СтруктураДанных.Вставить("Документы"		,Массив);
	
	СтруктураДанных.Вставить("Справочники"		,Массив);
	
	СтруктураДанных.Вставить("Константы"		,Новый Массив);
	
	Массив = новый Массив;
	Массив.Добавить("ЗначенияПеречисления");
	СтруктураДанных.Вставить("Перечисления"		,Массив);
	
	Массив = новый Массив;
	Массив.Добавить("СтандартныеРеквизиты");
	Массив.Добавить("Измерения");
	Массив.Добавить("Ресурсы");
	СтруктураДанных.Вставить("РегистрыСведений"		,Массив);
	
	Массив = новый Массив;
	Массив.Добавить("СтандартныеРеквизиты");
	Массив.Добавить("Измерения");
	Массив.Добавить("Ресурсы");
	СтруктураДанных.Вставить("РегистрыНакопления"		,Массив);
	
	Для Каждого Таблица из СтруктураДанных цикл
		НТ = Корень.Добавить();
		НТ.Реквизит = Таблица.Ключ;
		Для Каждого стр из Метаданные[Таблица.Ключ] цикл
			Нстр = НТ.ПолучитьЭлементы().Добавить();
			Нстр.Тип = стр.ПолноеИмя();
			Нстр.Реквизит = стр.Имя;
			Нстр.Значение = стр.Синоним;
			Для Каждого Трекв из Таблица.Значение цикл 
				Подс = Нстр.ПолучитьЭлементы().Добавить();
				Подс.Реквизит = Трекв;
				Для Каждого рекв из стр[Трекв] цикл 
					с = Подс.ПолучитьЭлементы().Добавить();	
					с.Реквизит = рекв.имя;
					с.Значение = рекв.Синоним;
					Если Трекв = "ТабличныеЧасти" Тогда
						Для Каждого к из рекв.Реквизиты Цикл
							Колонка = с.ПолучитьЭлементы().Добавить();
							Колонка.Реквизит = к.имя;
							Колонка.Значение = к.Синоним;		
							Колонка.Тип = ПолучитьОписаниеТипа(к.Тип); 
						КонецЦикла;
					Иначе
						Если НЕ "ЗначенияПеречисления" = Трекв Тогда
							с.Тип = ПолучитьОписаниеТипа(Рекв.Тип); 
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;  
КонецПроцедуры // МетаданныеВДерево()
 
&НаСервере
Функция ПолучитьМакет(ИмяМакета = "Макет")
	Об = РеквизитФормыВЗначение("ОбъектОбработки");	
	Возврат Об.ПолучитьМакет(ИмяМакета);
КонецФункции // ПолучитьМакет()

&НаСервере
Функция Пс(Значение, Текст = "")
	Если ЗначениеЗаполнено(Текст) Тогда
		Рез = Неопределено;
		Выполнить(Текст);
		Возврат Рез;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции


&НаКлиенте
Процедура _Ссылки(Команда)
	_ИспСсылки = НЕ _ИспСсылки;
	Элементы._Ссылки.Видимость = _ИспСсылки;
КонецПроцедуры


&НаКлиенте
Процедура _Дерево(Команда)
	_ПоказатьДерево = НЕ _ПоказатьДерево;
	Элементы.ГруппаДерево.Видимость = _ПоказатьДерево;
КонецПроцедуры


&НаКлиенте
Процедура _Функции(Команда)
	_ПоказатьФункции = НЕ _ПоказатьФункции;
	Элементы._Функции.Видимость = _ПоказатьФункции;
КонецПроцедуры


&НаКлиенте
Процедура _ТабличныйДок(Команда)
	_ТабличныйДок = НЕ _ТабличныйДок;
	Элементы._ГруппаТД.Видимость = _ТабличныйДок;
КонецПроцедуры


&НаКлиенте
Процедура _ПоказатьТекст(Команда)
	_ПоказатьТекст = НЕ _ПоказатьТекст;
	Элементы.ГруппаТекст.Видимость = _ПоказатьТекст;
КонецПроцедуры


&НаКлиенте
Процедура _ОбъектыПриАктивизацииСтроки(Элемент)
	ТД = Элементы._Объекты.ТекущиеДанные;	
	Если НЕ ТД = Неопределено Тогда
		_ЗаполнитьРеквизитыОбъекта(Элементы._Объекты.ТекущиеДанные.Объект,Истина);
		Элементы._РеквизитыОбъекта.ОтборСтрок = новый ФиксированнаяСтруктура("Объект",Элементы._Объекты.ТекущиеДанные.Объект);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура _ЗаполнитьРеквизитыОбъекта(Ссылка,ТолькоОтбор = Ложь,Удалить = Истина)
	Если НЕ ЗначениеЗаполнено(Ссылка)  Тогда
		Возврат;	
	КонецЕсли; 
	Если НЕ ТолькоОтбор Тогда		
		Найти = _РеквизитыОбъекта.НайтиСтроки(новый Структура("Объект",Ссылка)); 
		Обновлять = Найти.Количество() = 0;
		Если Удалить Тогда 		
			Для Каждого стр из Найти Цикл
				_РеквизитыОбъекта.Удалить(стр);
			КонецЦикла;
			Обновлять = Истина;
		КонецЕсли; 		
		ОписаниеТаблицы = новый ОписаниеТипов("ТаблицаЗначений");
		Если Обновлять Тогда						
			Мета = Ссылка.Метаданные();
			ПолноеИмя = Мета.ПолноеИмя();
			ВИД = РазложитьСтрокуВМассивПодстрок(ПолноеИмя,".")[0];	
			
			ВидМетаданных = новый Структура(); 
			ИспользуемыеДанные = новый Массив;	
			ИспользуемыеДанные.Добавить("СтандартныеРеквизиты");
			ИспользуемыеДанные.Добавить("Реквизиты");
			//ИспользуемыеДанные.Добавить("ТабличныеЧасти");
			
			ВидМетаданных.Вставить("Справочник"	,ИспользуемыеДанные); 
			ВидМетаданных.Вставить("Документ"	,ИспользуемыеДанные);
			//ВидМетаданных.Вставить("ПланСчетов"	,ИспользуемыеДанные);	
			ИспользуемыеДанные = новый Массив;
			
			ИспользуемыеДанные.Добавить("ЗначенияПеречисления");
			ВидМетаданных.Вставить("Перечисление",ИспользуемыеДанные);
			//Найти = Элементы.Найти("СтраницыТЧ");
			//Если НЕ Найти = Неопределено Тогда
			//	Элементы.Удалить(Найти);
			//КонецЕсли;
			//Если _РеквизитыФормыТЧ.Количество() Тогда
			//	ИзменитьРеквизиты(,_РеквизитыФормыТЧ);
			//	_РеквизитыФормыТЧ.Очистить();
			//	ЭтаФорма.ПолучитьРеквизиты();
			//КонецЕсли;
				
			//СтраницыТЧ = Элементы.Добавить("СтраницыТЧ",Тип("ГруппаФормы"),Элементы.ТабличныеЧасти);
			//СтраницыТЧ.Вид = ВидГруппыФормы.Страницы;
			//СтраницыТЧ.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСлеваГоризонтально;
			Для Каждого Таблица из ВидМетаданных[ВИД] Цикл
				Для Каждого стр из Мета[Таблица] Цикл
					Если Таблица = "ТабличныеЧасти" Тогда						
						//Массив = новый Массив; 
						//РеквизитФормы = Новый РеквизитФормы(Стр.Имя,ОписаниеТаблицы);
						//Массив.Добавить(РеквизитФормы);
						//_РеквизитыФормыТЧ.Добавить(РеквизитФормы);
						//ИзменитьРеквизиты(Массив);				
						//
						//ГруппаФормы = Элементы.Добавить("СТ_"+Стр.Имя,Тип("ГруппаФормы"),Элементы.СтраницыТЧ);
						//ГруппаФормы.Заголовок = Стр.Имя +" ("+Ссылка[Стр.Имя].Количество()+")";
						//ТаблицаФормы = Элементы.Добавить(Стр.Имя,Тип("ТаблицаФормы"),Элементы["СТ_"+Стр.Имя]);							
						//ТаблицаФормы.ПутьКДанным = Стр.Имя;
						//
						//Для Каждого Рекв из стр.Реквизиты Цикл
						//	Массив = новый Массив;
						//	РеквизитПоля = Новый РеквизитФормы(Рекв.Имя,Рекв.Тип,Стр.Имя);
						//	Массив.Добавить(РеквизитПоля);
						//	ИзменитьРеквизиты(Массив);								
						//	
						//	ПолеФормы = Элементы.Добавить(Стр.Имя+""+Рекв.Имя,Тип("ПолеФормы"),Элементы[Стр.Имя]);	
						//	ПолеФормы.ОграничениеТипа = Рекв.Тип;								
						//	ПолеФормы.ПутьКДанным = Стр.Имя+"."+Рекв.Имя
						//КонецЦикла; 
						//ЭтаФорма[Стр.Имя].Загрузить(Ссылка[Стр.Имя].Выгрузить());
					Иначе						
						Нстр = _РеквизитыОбъекта.Добавить();
						Нстр.Синоним 	= стр.Синоним;
						Нстр.Реквизит 	= стр.Имя;
						Если НЕ ЗначениеЗаполнено(Нстр.Синоним) Тогда
							Нстр.Синоним = Нстр.Реквизит;	
						КонецЕсли; 
						Нстр.Объект 	= Ссылка;
						Нстр.Значение 	= Ссылка[Нстр.Реквизит];
						НСтр.Тип 		= стр.Тип;
					КонецЕсли; 
				КонецЦикла; 			
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли;	
КонецПроцедуры // ()

&НаКлиенте
Процедура _ОбъектыОбъектПриИзменении(Элемент)
		ТД = Элементы._Объекты.ТекущиеДанные;	
	Если НЕ ТД = Неопределено Тогда
		_ЗаполнитьРеквизитыОбъекта(Элементы._Объекты.ТекущиеДанные.Объект);
		Элементы._РеквизитыОбъекта.ОтборСтрок = новый ФиксированнаяСтруктура("Объект",Элементы._Объекты.ТекущиеДанные.Объект);
	КонецЕсли;
КонецПроцедуры 


&НаКлиенте
Процедура _РеквизитыОбъектаЗначениеПриИзменении(Элемент)
	Элементы._РеквизитыОбъекта.ТекущиеДанные.Изменен = истина;
КонецПроцедуры


&НаКлиенте
Процедура _Записать(Команда)
	ЗаписатьОбъект();
	_ОбъектыПриАктивизацииСтроки(NULL);
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОбъект(_об = Неопределено,ОбменДаннымиЗагрузка = ИСТИНА)
	Если _об = Неопределено Тогда
		Массив = _Объекты.Выгрузить().ВыгрузитьКолонку("Объект");		
	Иначе
		Массив = новый Массив;
		Массив.Добавить(_об);
	КонецЕсли;	
	Для Каждого стр из Массив Цикл
		Найти = _РеквизитыОбъекта.НайтиСтроки(новый Структура("Объект,Изменен",стр,Истина)); 
		Если Найти.Количество() Тогда
			об = стр.ПолучитьОбъект();
			Для Каждого рекв из Найти Цикл
				об[рекв.Реквизит] = рекв.Значение;	
			КонецЦикла;
			//об = Справочники.Банки.СоздатьЭлемент();
			об.ОбменДанными.Загрузка = ОбменДаннымиЗагрузка;
			об.Записать();
			_ЗаполнитьРеквизитыОбъекта(стр);
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры // ЗаписатьОбъект()

&НаКлиенте
Процедура _ЗаписатьТекущий(Команда)
	ТД = Элементы._Объекты.ТекущиеДанные;	
	Если НЕ ТД = Неопределено Тогда		
		ЗаписатьОбъект(Тд.Объект);
		_ОбъектыПриАктивизацииСтроки(NULL);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ВРедактор(Команда)
	Значение = Элементы._Ссылки.ТекущиеДанные.стр;
	ДобавитьВРедактор(Значение);	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВРедактор(Значение)
	Нстр = _Объекты.Добавить();	
	Нстр.Объект = Значение;
	_ЗаполнитьРеквизитыОбъекта(Значение);
КонецПроцедуры
 